#Configuratrion for antophd plugin
#Do not edit this file if you didn't know what you're doing
options:
	config: "plugins/WorldNetwork/config.yml"
	no-permission: &cYou don't have permission to do that
	player-data: "plugins/WorldNetwork/UserData/%uuid of player%.yml"
	spawn: "plugins/WorldNetwork/spawn.yml"
	warp: "plugins/WorldNetwork/warp.yml"
	group: "plugins/WorldNetwork/group.yml"
	kit: "plugins/WorldNetwork/kits.yml"
on load:
	send "&f[WorldNetwork] &aLoading config..." to console
	if file {@config} does not exist:
		create file {@config}
		add "reload" to skutil yaml list "command-list" from file {@config}
		add "version" to skutil yaml list "command-list" from file {@config}
		add "help" to skutil yaml list "command-list" from file {@config} 
		add "list" to skutil yaml list "command-list" from file {@config}
		add "remove" to skutil yaml list "command-list" from file {@config}
		add "test" to skutil yaml list "command-list" from file {@config}
		add "spawn" to skutil yaml list "command-list" from file {@config}
		add "group" to skutil yaml list "command-list" from file {@config}
		set skutil yaml value "server-name.group-1" from file {@config} to "group-1"
		set skutil yaml value "server-name.group-2" from file {@config} to "group-2"
		set skutil yaml value "maintenance.group-1" from file {@config} to false
		set skutil yaml value "maintenance.group-2" from file {@config} to false
		set skutil yaml value "tpall-cooldown" from file {@config} to "10 second"
		set skutil yaml value "home.default" from file {@config} to 3
		set skutil yaml value "enderchest.default" from file {@config} to 3
		write "## |-------------------| ##" at line 1 to file {@config}
		write "## |WorldNetworkScritpt| ##" at line 2 to file {@config}
		write "## |-------------------| ##" at line 3 to file {@config}
		write "## by antophd ##" at line 4 to file {@config}
		write "## This is config File for PerWorldScript need a help contact me dc: @antophd ##" at line 5 to file {@config}
		write "" at line 6 to file {@config}
		write "## |----------------| ##" at line 7 to file {@config}
		write "## |  Command List  | ##" at line 8 to file {@config}
		write "## |----------------| ##" at line 9 to file {@config}
		write "## NO TOUCH!!         ##" at line 10 to file {@config}
		write "" at line 11 to file {@config}
		write "" at line 21 to file {@config}
		write "## |---------------| ##" at line 22 to file {@config}
		write "## |  Server Name  | ##" at line 23 to file {@config}
		write "## |---------------| ##" at line 24 to file {@config}
		write "## Change this to the name of server that you want" at line 25 to file {@config}
		write "" at line 26 to file {@config}
		write "" at line 30 to file {@config}
		write "## |---------------| ##" at line 31 to file {@config}
		write "## |  Maintenance  | ##" at line 32 to file {@config}
		write "## |---------------| ##" at line 33 to file {@config}
		write "" at line 34 to file {@config}
		write "" at line 38 to file {@config}
		write "## |------------------| ##" at line 39 to file {@config}
		write "## |  Tpall Cooldown  | ##" at line 40 to file {@config}
		write "## |------------------| ##" at line 41 to file {@config}
		write "" at line 42 to file {@config}
		write "" at line 44 to file {@config}
		write "## |-------------| ##" at line 45 to file {@config}
		write "## |  Max Homes  | ##" at line 46 to file {@config}
		write "## |-------------| ##" at line 47 to file {@config}
		write "" at line 48 to file {@config}
		write "" at line 51 to file {@config}
		write "## |-----------------------| ##" at line 52 to file {@config}
		write "## |  Max Enderchest Rows  | ##" at line 53 to file {@config}
		write "## |-----------------------| ##" at line 54 to file {@config}
		write "" at line 55 to file {@config}
	if file {@group} does not exist:
		add "world" to skutil yaml list "group.group-1" from file {@group}
		add "world_nether" to skutil yaml list "group.group-1" from file {@group}
		add "world_the_end" to skutil yaml list "group.group-1" from file {@group}
		add "example" to skutil yaml list "group.group-2" from file {@group}
		write "##If you want to make a change to this file remember to not change the group name thank :) ##" at line 1 to file {@group}
	if file {@spawn} does not exist:
		create file {@spawn}
		set skutil yaml value "spawn.group.group-1.location" from file {@spawn} to "None" 
		set skutil yaml value "spawn.group.group-2.location" from file {@spawn} to "None" 
		set skutil yaml value "hub.location" from file {@spawn} to "None"
	if file {@warp} does not exist:
		create file {@warp}
		set skutil yaml value "warp.group-1.example.location" from file {@warp} to "none"
		set skutil yaml value "warp.group-2.example.location" from file {@warp} to "none"
	if file {@kit} does not exist:
		create file {@kit}
		set skutil yaml value "kit.group-1.kit-1.delay" from file {@kit} to 60
		set skutil yaml value "kit.group-1.kit-1.item" from file {@kit} to ""
		set skutil yaml value "kit.group-1.kit-2.delay" from file {@kit} to 60
		set skutil yaml value "kit.group-1.kit-2.item" from file {@kit} to ""
		set skutil yaml value "kit.group-1.kit-2.permission" from file {@kit} to "kit.kit-2"
		set skutil yaml value "kit.group-2.kit-1.delay" from file {@kit} to "60 seconds"
		set skutil yaml value "kit.group-2.kit-1.item" from file {@kit} to ""
		set skutil yaml value "kit.group-2.kit-2.delay" from file {@kit} to "60 seconds"
		set skutil yaml value "kit.group-2.kit-2.item" from file {@kit} to ""
		set skutil yaml value "kit.group-2.kit-2.permission" from file {@kit} to "kit.kit-2"

		write "## If you want to edit the delay can be second can be time ##" at line 1 to file {@kit}
		write "## 1 minute = 60 second, 1 hour = 3600 second, 1 day =  86400 second, 30 day = 2592000 second ##" at line 2 to file {@kit}
		write "## example for time 'delay: 1 month and 3 days and 40 minutes' or 'delay: 3 minutes and 20 seconds'for variable: month, day, minute, second ##" at line 3 to file {@kit}
		write "## Remember to put s to time variable id the time is more than 1 example: 2 seconds or 1 minute" at line 4 to file {@kit}
 
	set {CONFIG::command-list::*} to yml list "command-list" of file {@config}
	set {CONFIG::tpall-cooldown} to yml value "tpall-cooldown" of file {@config} parsed as number
	set {SPAWN::hub} to yml value "hub.location" of file {@spawn}
	set {GROUP::list::*} to yml nodes "group" of file {@group}
	loop {GROUP::list::*}:
		if yml path "warp.%loop-value%" in file {@warp} does not exist:
			set skutil yaml value "warp.%loop-value%" from file {@warp} to "none"
		if yml path "spawn.group.%loop-value%.location" in file {@spawn} does not exist:
			set skutil yaml value "spawn.group.%loop-value%.location" from file {@spawn} to "None" 
		if yml path "server-name.%loop-value%" in file {@config} does not exist:
			set skutil yaml value "server-name.%loop-value%" from file {@config} to "%loop-value%"
		if yml path "maintenance.%loop-value%" in file {@config} does not exist:
			set skutil yaml value "maintenance.%loop-value%" from file {@config} to false
		if yml path "kit.%loop-value%" in file {@kit} does not exist:
			set skutil yaml value "kit.%loop-value%.kit-1.delay" from file {@kit} to 60
			set skutil yaml value "kit.%loop-value%.kit-1.item" from file {@kit} to ""
			set skutil yaml value "kit.%loop-value%.kit-2.delay" from file {@kit} to 60
			set skutil yaml value "kit.%loop-value%.kit-2.item" from file {@kit} to ""
			set skutil yaml value "kit.%loop-value%.kit-2.permission" from file {@kit} to "kit.kit-2"

		set {GROUP::world-list::%loop-value%::*} to yml list "group.%loop-value%" of file {@group}
		set {CONFIG::server-name::%loop-value%} to yml value "server-name.%loop-value%" of file {@config}
		set {CONFIG::maintenance::%loop-value%} to yml value "maintenance.%loop-value%" of file {@config}
		set {SPAWN::%loop-value%} to yml value "spawn.group.%loop-value%.location" of file {@spawn}
		set {WARP::list::%loop-value%::*} to yml nodes "warp.%loop-value%" of file {@warp}
on unload:
	send "&f[WorldNetwork] &aSaving..." to console
	send "&f[WorldNetwork] &aWorldNetwork disable" to console
on skript load:
	send "&f[WorldNetwork] &7|-------------------|" to console
	send "&f[WorldNetwork] &7|                   |" to console
	send "&f[WorldNetwork] &7|   &aWORLD NETWORK &7  |" to console
	send "&f[WorldNetwork] &7|&a Made by:&c antopHD  &7|" to console
	send "&f[WorldNetwork] &7|-------------------|" to console
command worldnetwork [<text>] [<text>] [<text>]:
	aliases: wn, worldnetwork:worldnetwork, worldnetwork:wn
	trigger:
		if arg-1 is set:
			if sender have permission "worldnetwork.command":
				if "%{CONFIG::command-list::*}%" do not contain arg-1:
					send "&7command not found try /wn help" to command sender
				else if arg-1 is "remove":
					if arg-2 is "config":
						skutil delete file {@config}
						send "&adone" to command sender
					else if arg-2 is "warp":
						skutil delete file {@warp}
						send "&aDone" to command sender
					else if arg-2 is "spawn":
						skutil delete file {@spawn}
						send "&aDone" to command sender
					else if arg-2 is not "config", "spawn" or "warp":
						send "&cFIle not found" to command sender
					else if arg-2 is not set:
						send "please specify a file in plugin folder" to command sender
				else if arg-1 is "reload":
					send "&areloading.." to command sender
					execute console command "sk reload plugins.sk"
				else if arg-1 is "version":
					send "&aWorldNetwork &cBy: antophd" to command sender
					send "&fVersion: &a1.0" to command sender
				else if arg-1 is "help":
					if command sender have permission "wn.command":
						send "&a|---------- WorldNetwork ----------|" to command sender
						send "&7/wn reload - reload script" to command sender
						send "&7/wn version - WorldNetwork Version" to command sender
						send "&7/wn list - world list" to command sender
						send "&7/wn help - open help menu" to command sender
						send "&7/wn spawn - get spawn information" to command sender
						send "&7/wn group - add or remove group" to command sender
					if command sender do not have permission "wn.command":
						send "&a|---------- WorldNetwork ----------|" to command sender
						send "&7/wn version - WorldNetwork Version" to command sender
						send "&7/wn help - open help menu" to command sender
				else if arg-1 is "test":
					if arg-2 is "set":
						set {test} to convert date now to unix
						send "&aDate set"
						send "Date: %{test}%" to player
					if arg-2 is "delay":
						set {test2} to now
						set {test} to convert unix {test} to date
						set {test3} to difference between (convert unix (convert date {test2} to unix) to date) and (convert unix (convert date {test} to unix) to date)
						set {test3} to "%{test3}%" parsed as timespan 
						send {test3} to player
					if arg-2 is "test":
						set {test4} to 2800200
						set {test4} to "%{test4}% second" parsed as timespan
						send "%{test4}%" to player
				else if arg-1 is "list":
					send "&aWorld List" to command sender
					send "%{CONFIG::world-list::*}%" to command sender
				else if arg-1 is "spawn":
					if arg-2 is "info":
						if {GROUP::list::*} contains arg-3:
							send {SPAWN::%arg-3%} to command sender
						else if arg-3 is not set:
							send "&cPlease specify the group for the info"
						else:
							send "&cThat is not a group" to command sender
					else:
						send "&7Correct usage /wn spawn info (group)"
				else if arg-1 is "group":
					if arg-2 is "remove":
						if {GROUP::list::*} contains arg-3:
							send "&aRemoving %arg-3% from file warp" to command sender
							delete skutil yaml value "warp.%arg-3%" from file {@warp}
							delete skutil yaml value "warp.list.%arg-3%" from file {@warp}
							wait 1 second
							send "&aRemoving %arg-3% from file spawn" to command sender
							delete skutil yaml value "spawn.group.%arg-3%" from file {@spawn}
							wait 1 second
							send "&aRemoving %arg-3% from file config" to command sender
							delete skutil yaml value "server-name.%arg-3%" from file {@config}
							delete skutil yaml value "maintenance.%arg-3%" from file {@config}
							wait 1 second
							send "&aRemoving %arg-3% from file group" to command sender
							delete skutil yaml value "group.%arg-3%" from file {@group}
							wait 1 second
							send "&aRemoving %arg-3% from file kit" to command sender
							delete skutil yaml value "kit.%arg-3%" from file {@kit}
							wait 1 second
							send "&aRemoving %arg-3% from file enderchest"
							delete dir "plugins/WorldNetwork/enderchest/%arg-3%"
							send "&aRemoving all variable containing %arg-3%" to command sender
							delete {GROUP::world-list::%arg-3%::*}
							delete {CONFIG::server-name::%arg-3%}
							delete {CONFIG::maintenance::%arg-3%}
							delete {SPAWN::%arg-3%}
							delete {WARP::list::%arg-3%::*}
							delete {SPAWN::%arg-3%}
							send "&agroup %arg-3% has been removed!" to command sender
						else:
							send "&cThat group does not exist" to command sender
					else if arg-2 is "add":
						if arg-3 is set:
							add "example" to skutil yaml list "group.%arg-3%" from file {@group}
							execute console command "sk reload plugins.sk"
							send "Group %arg-3% created!" to command sender
						else:
							send "&cCorrect usage /wn group add <group>"
					else if arg-2 is "list":
						send "&7|-----&aGroup List&7-----|"
						loop {GROUP::list::*}:
							send "&7- &a%loop-value%"
					else if arg-2 is not "add" or "remove" or "list":
						send "Correct Usage /wn group <add/remove/list> <group>" to command sender
			else:
				if "%{CONFIG::command-list::*}%" do not contain arg-1:
					send "&7command not found try /wn help" to command sender
				else if arg-1 is "version":
					send "&aWorldNetwork &cBy: antophd" to command sender
					send "&fVersion: &a1.0" to command sender
				else if arg-1 is "help":
					send "&a|---------- WorldNetwork ----------|" to command sender
					send "&7/wn version - WorldNetwork Version" to command sender
					send "&7/wn help - open help menu" to command sender
				else:
					send "{@no-permission}" to command sender
		else if arg-1 is not set:
			if command sender have permission "wn.command":
				send "&a|---------- WorldNetwork ----------|" to command sender
				send "&7/wn reload - reload script" to command sender
				send "&7/wn version - WorldNetwork Version" to command sender
				send "&7/wn list - world list" to command sender
				send "&7/wn help - open help menu" to command sender
				send "&7/wn spawn - get spawn information" to command sender
				send "&7/wn group - add or remove group" to command sender
			if command sender do not have permission "wn.command":
				send "&a|---------- World Network ----------|" to command sender
				send "&7/wn version - WorldNetwork Version" to command sender
				send "&7/wn help - open help menu" to command sender
command server [<text>] [<player>]:
	aliases: worldnetwork:server
	description: Send player to listed server
	trigger:
		loop {GROUP::list::*}:
			if arg-2 is set:
				if command sender have permission "worldnetwork.serversend":
					if arg-1 is "%{CONFIG::server-name::%loop-value%}%":
						if {CONFIG::maintenance::%loop-value%} is false:
							if {SPAWN::%loop-value%} is "none":
								send "&aServer not registered" to command sender
							else:
								teleport arg-2 to {SPAWN::%loop-value%}
						else if {CONFIG::maintenance::%loop-value%} is true:
							send "&cCant teleport player because that server is under maintenance" to command sender
				else:
					send "{@no-permission}" to command sender
			else if arg-1 is set:
				if arg-2 is not set:
					if arg-1 is "%{CONFIG::server-name::%loop-value%}%":
						if {CONFIG::maintenance::%loop-value%} is false:
							if {SPAWN::%loop-value%} is "none":
								send "&aServer not registered" to command sender
							else:
								teleport player to {SPAWN::%loop-value%}
						else if {CONFIG::maintenance::%loop-value%} is true:
							send "server is under maintenance" to player
			else:
				send "&cServer not exist" to player
command spawn [<player>]:
	aliases: worldnetwork:spawn
	description: spawn command
	trigger:
		loop {GROUP::list::*}:
			if arg-1 is set:
				if command sender have permission "worldnetwork.spawn.player":
					if {GROUP::world-list::%loop-value%::*} contains {world::%arg-1%}:
						if {SPAWN::%loop-value%} is not "none":
							teleport arg-1 to {SPAWN::%loop-value%}
							send title "&eTeleporting..." to arg-1
						else:
							send "&aSpawn not set on target world" to command sender
			else if arg-1 is not set:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					if {SPAWN::%loop-value%} is not "none":
						teleport player to {SPAWN::%loop-value%}
						send title "&eTeleporting..." to player
					else:
						send "&aSpawn not set" to command sender
command setspawn:
	aliases: worldnetwork:setspawn
	description: set spawn
	permission: worldnetwork.setspawn
	permission message: {@no-permission}
	trigger:
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				set skutil yaml value "spawn.group.%loop-value%.location" from file {@spawn} to player's location
				set {SPAWN::%loop-value%} to yml value "spawn.group.%loop-value%.location" of file {@spawn}
				send "&aSpawn set for %loop-value%" to player
command uuid <offlineplayer>:
	aliases: worldnetwork:uuid
	description: give uuid of target
	permission: worldnetwork.uuid
	permission message: {@no-permission}
	usage: /uuid <player>
	trigger:
		if arg-1 is set:
			if {UUID::%arg-1%} is set:
				send "&Auuid: %{UUID::%arg-1%}%" to command sender
			else:
				send "&athat player is never join" to command sender
command maintenance [<text>] [<text>]:
	aliases: worldnetwork:maintenance
	permission: worldnetwork.maintenance
	permission message: {@no-permission}
	description: make group maintenance
	usage: /maintenance <group> <on/off>
	trigger:
		if {GROUP::list::*} contains arg-1:
			if arg-2 is "on":
				if {CONFIG::maintenance::%arg-1%} is false:
					set skutil yaml value "maintenance.%arg-1%" from file {@config} to true
					set {CONFIG::maintenance::%arg-1%} to true
					loop all players:
						if {SPAWN::hub} is not "none":
							if {GROUP::world-list::%arg-1%::*} contains {world::%loop-player%}:
								teleport loop-player to {SPAWN::hub}
						else:
							if {GROUP::world-list::%arg-1%::*} contains {world::%loop-player%}:
								kick loop-player due to "Server is under maintenance"
					send "&c%arg-1% now under maintenance" to command sender
				else:
					send "&cThat group is already under maintenance" to command sender
			if arg-2 is "off":
				if {CONFIG::maintenance::%arg-1%} is true:
					set skutil yaml value "maintenance.%arg-1%" from file {@config} to false
					set {CONFIG::maintenance::%arg-1%} to false
					send "&a%arg-1% is now online" to command sender
				else:
					send "&aThat group is already online!" to command sender
		else:
			send "&cThat group didn't exist" to command sender
command setwarp <text>:
	aliases: worldnetwork:setwarp
	permission: worldnetwork.setwarp
	permission message: {@no-permission}
	description: set warp for selected group
	usage: /setwarp <warp name>
	trigger:
		loop {GROUP::list::*}:
			if arg-1 is set:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					if yml path "warp.%loop-value%.%arg-1%" in file {@warp} does not exist:
						set skutil yaml value "warp.%loop-value%.%arg-1%.location" from file {@warp} to command sender's location
						set {WARP::list::%loop-value%::*} to yml nodes "warp.%loop-value%" of file {@warp}
						if yml path "warp.%loop-value%.%arg-1%.location" in file {@warp} exists:
							send "&aWarp %arg-1% set for world in group %loop-value%"
						else:
							send "&cPlease specify the warp location"
					else:
						send "&cWarp with that name already exist do /delwarp %arg-1%" to command sender
			else:
				send "&cCorrect usage /setwarp <warp name> <group>"
command delwarp <text> [<text>]:
	aliases: worldnetwork:delwarp
	description: delete warp
	permission: worldnetwork.delwarp
	usage: /delwarp <warp name>
	permission message: {@no-permission}
	trigger:
		if {GROUP::list::*} contains arg-2:
			if yml path "warp.%arg-2%.%arg-1%.location" in file {@warp} exists:
				delete skutil yaml value "warp.%arg-2%.%arg-1%" from file {@warp}
				send "Warp %arg-1% remove from warp list %arg-2%" to command sender
			else:
				send "&cThat warp dint exist" to command sender
		else if arg-2 is "all":
			loop {GROUP::list::*}:
				delete skutil yaml value "warp.%loop-value%.%arg-1%" from file {@warp}
			send "&aRemoved %arg-1% warp from all group" to command sender
		else:
			send "&cCorrect usage /delwarp <warp name> <group/all>" to command sender
command warp <text>:
	aliases: worldnetwork:warp
	description: teleporting to selected warp
	usage: /warp <warp name or list>
	trigger:
		loop {GROUP::list::*}:
			if arg-1 is "list":
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					set {WARP::list::%loop-value%::*} to yml nodes "warp.%loop-value%" of file {@warp}
					send "&7|---&aWarp List&7---|" to command sender
					loop {WARP::list::%loop-value%::*}:
						send "&f - &e%loop-value-2%" to command sender
			else if arg-1 is set:
				if {WARP::list::%loop-value%::*} contains arg-1:
					if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
						teleport player to yaml value "warp.%loop-value%.%arg-1%.location" from file {@warp}
						send title "&eTeleporting..." to player
					else:
						send "&cThat warp didn't exist" to command sender
			else:
				send "&cWarp not found" to command sender
command warps:
	aliases: worldnetwork:warps
	usage: /warps
	trigger:
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				set {WARP::list::%loop-value%::*} to yml nodes "warp.%loop-value%" of file {@warp}
				set {_count} to 20
				set {_warps} to a new chest inventory with 6 row named "warp list"
				set slot 0 of {_warps} to gray stained glass pane named ""
				set slot 1 of {_warps} to gray stained glass pane named ""
				set slot 2 of {_warps} to gray stained glass pane named ""
				set slot 3 of {_warps} to gray stained glass pane named ""
				set slot 4 of {_warps} to gray stained glass pane named ""
				set slot 5 of {_warps} to gray stained glass pane named ""
				set slot 6 of {_warps} to gray stained glass pane named ""
				set slot 7 of {_warps} to gray stained glass pane named ""
				set slot 8 of {_warps} to gray stained glass pane named ""
				loop {WARP::list::%loop-value%::*}:
					if "crates, crate" contains loop-value-2:
						set slot {_count} of {_warps} to chest named "&f%loop-value-2%"
					if "enchant, enchants" contains loop-value-2:
						set slot {_count} of {_warps} to enchanting table named "&f%loop-value-2%"
					if "enchant, enchants, crates, crate" do not contain loop-value-2:
						set slot {_count} of {_warps} to grass block named "&f%loop-value-2%"
					add 1 to {_count}
					if {_count} < 30:
						if {_count} > 24:
							set {_count} to 30
				set slot 45 of {_warps} to gray stained glass pane named ""
				set slot 46 of {_warps} to gray stained glass pane named ""
				set slot 47 of {_warps} to gray stained glass pane named ""
				set slot 48 of {_warps} to gray stained glass pane named ""
				set slot 49 of {_warps} to gray stained glass pane named ""
				set slot 50 of {_warps} to gray stained glass pane named ""
				set slot 51 of {_warps} to gray stained glass pane named ""
				set slot 52 of {_warps} to gray stained glass pane named ""
				set slot 53 of {_warps} to gray stained glass pane named ""
				open {_warps} to player
				set {_count} to 0
on inventory click:
	name of event-inventory is "warp list":
		cancel event
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				loop {WARP::list::%loop-value%::*}:
					name of event-item is "&f%loop-value-2%":
						close player's inventory
						teleport player to yaml value "warp.%loop-value-1%.%loop-value-2%.location" from file {@warp}
						send title "&eTeleporting..." to player
command sethub:
	aliases: worldnetwork:sethub
	description: Set hub 
	permission: worldnetwork.sethub
	usage: /sethub
	permission message: {@no-permission}
	trigger:
		set skutil yaml value "hub.location" from file {@spawn} to player's location
		set {SPAWN::hub} to yml value "hub.location" of file {@spawn}
		send "&aHub set" to player
command hub:
	aliases: worldnetwork:hub
	description: teleport to hub
	usage: /hub
	trigger:
		if skutil yaml value "hub.location" from file {@spawn} is "None":
			send "&cHub not set yet" to player
		else:
			teleport player to {SPAWN::hub}
command delhub:
	aliases: worldnetwork:delhub
	description: delete hub location
	permission: worldnetwork.delhub
	permission message: {@no-permission}
	trigger:
		set skutil yaml value "hub.location" from file {@spawn} to "None"
		set {SPAWN::hub} to yml value "hub.location" of file {@spawn}
		send "&aHub removed" to command sender
command tpa <player>:
	aliases: tpask, call, worldnetwork:tpa, worldnetwork:tpask, worldnetwork:call
	description: Teleport to player 
	usage: Correct usge /tpa <player>
	trigger:
		if arg-1 is not player:
			loop {GROUP::list::*}:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					if {GROUP::world-list::%loop-value%::*} contains {world::%arg-1%}:
						if {TPA::%player%::%arg-1%} is not true:
							set skutil yaml value "tpa-from" from file "plugins/WorldNetwork/UserData/%uuid of arg-1%.yml" to player
							set skutil yaml value "tpa-method" from file "plugins/WorldNetwork/UserData/%uuid of arg-1%.yml" to "tpa"
							set {TPA::%player%::%arg-1%} to true
							send "&aTeleport requested" to player
							send "&a%player% &7Want to teleport to you" to arg-1
							send "&a/tpaccept &7to accept &c/tpdeny &7to deny" to arg-1
							send "&7You have &a120 second &7To confirm" to arg-1
							wait 120 second
							if {TPA::%player%::%arg-1%} is true:
								set {TPA::%player%::%arg-1%} to false
								send "&cYour tpa request have been expired"
								if skutil yaml value "tpa-from" from file "plugins/WorldNetwork/UserData/%uuid of arg-1%.yml" is player:
									set skutil yaml value "tpa-from" from file {@player-data} to "none"
									set skutil yaml value "tpa-method" from file {@player-data} to "none"
						else:
							send "&7You already have a teleport request to that player" to player
					else: 
						send "&cThat player are not in the same server" to player
		else:
			send "&cYou can't teleport to your self"
command tpaccept:
	aliases: tpyes, worldnetwork:tpaccept, worldnetwork:tpyes
	description: Accept player teleport request
	usage: /tpaccept
	trigger:
		set {TPA::request::%player%} to skutil yaml value "tpa-from" of file {@player-data}
		set {TPA::method} to skutil yaml value "tpa-method" of file {@player-data}
		set {TPAHERE::location::%player%} to skutil yaml value "tpa-location" of file {@player-data}
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				if {GROUP::world-list::%loop-value%::*} contains {world::%{TPA::request::%player%}%}:
					if {TPA::method} is "tpa":
						set {TPA::%{TPA::request::%player%}%::%player%} to false
						send "&aYou accept %{TPA::request::%player%}% teleport request" to player
						send "&a%player% accept your teleport request" to {TPA::request::%player%}
						wait 0.5 second
						teleport {TPA::request::%player%} to player
						set skutil yaml value "tpa-from" from file {@player-data} to "none"
						set skutil yaml value "tpa-method" from file {@player-data} to "none"
					else if {TPA::method} is "tpahere":
						set {TPAHERE::%{TPA::request::%player%}%::%player%} to false
						send "&aYou accept %{TPA::request::%player%}% teleport request" to player
						send "&a%player% accept your teleport request" to {TPA::request::%player%}
						wait 0.5 second
						teleport player to {TPAHERE::location::%player%}
						set skutil yaml value "tpa-from" from file {@player-data} to "none"
						set skutil yaml value "tpa-method" from file {@player-data} to "none"
						set skutil yaml value "tpa-location" from file {@player-data} to "none"
					else:
						send "&7You don't have any teleport request" to player
command tpadeny:
	aliases: tpno, worldnetwork:tpadeny, worldnetwork:tpno
	description: deny player teleport request
	usage: /tpadeny
	trigger:
		set {TPA::request::%player%} to skutil yaml value "tpa-from" of file {@player-data}
		set {TPA::method} to skutil yaml value "tpa-method" of file {@player-data}
		if {TPA::method} is "tpa" or "tpahere":
			set {TPA::%{TPA::request::%player%}%::%player%} to false
			send "&cYou rejected %{TPA::request::%player%}% teleport request" to player
			send "&c%player% deny your teleport request" to {TPA::request::%player%}
			set skutil yaml value "tpa-from" from file {@player-data} to "none"
			set skutil yaml value "tpa-method" from file {@player-data} to "none"
			set skutil yaml value "tpa-location" from file {@player-data} to "none"
		else:
			send "&7You don't have any teleport request" to player
command tpahere <player>:
	aliases: callhere, worldnetwork:tpahere, worldnetwork:callhere
	description: Teleport player to your location
	usage: /tpahere <player>
	trigger:
		if arg-1 is not player:
			loop {GROUP::list::*}:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					if {GROUP::world-list::%loop-value%::*} contains {world::%arg-1%}:
						if {TPAHERE::%player%::%arg-1%} is not true:
							set skutil yaml value "tpa-from" from file "plugins/WorldNetwork/UserData/%uuid of arg-1%.yml" to player
							set skutil yaml value "tpa-method" from file "plugins/WorldNetwork/UserData/%uuid of arg-1%.yml" to "tpahere"
							set skutil yaml value "tpa-location" from file "plugins/WorldNetwork/UserData/%uuid of arg-1%.yml" to player's location
							set {TPAHERE::%player%::%arg-1%} to true
							send "&aTeleport requested" to player
							send "&a%player% &7Want you teleport to them" to arg-1
							send "&a/tpaccept &7to accept &c/tpdeny &7to deny" to arg-1
							send "&7You have &a120 second &7To confirm" to arg-1
							wait 120 second
							if {TPAHERE::%player%::%arg-1%} is true:
								set {TPAHERE::%player%::%arg-1%} to false
								send "&cYour tpahere request have been expired"
								if skutil yaml value "tpa-from" from file "plugins/WorldNetwork/UserData/%uuid of arg-1%.yml" is player:
									set skutil yaml value "tpa-from" from file {@player-data} to "none"
									set skutil yaml value "tpa-method" from file {@player-data} to "none"
									set skutil yaml value "tpa-location" from file {@player-data} to "none"
						else:
							send "&7You already have a teleport request to that player" to player
					else: 
						send "&cThat player are not in the same server" to player
		else:
			send "&cYou can't teleport to your self"
command tpall:
	aliases: callall, askall, worldnetwork:tpall, worldnetwork:callall, worldnetwork:askall
	description: send teleport request to all player is server
	permission: worldnetwork.tpall
	permission message: {@no-permission}
	trigger:
		if {TPALL::cooldown} is false:
			loop {GROUP::list::*}:
				loop all players:
					if {GROUP::world-list::%loop-value-1%::*} contains {world::%player%}:
						set {TPALL::cooldown} to true
						send "&aTeleport requested" to player
						if {GROUP::world-list::%loop-value-1%::*} contains {world::%loop-player%}:
							if loop-player is not player:
								set skutil yaml value "tpa-from" from file "plugins/WorldNetwork/UserData/%uuid of loop-player%.yml" to player
								set skutil yaml value "tpa-method" from file "plugins/WorldNetwork/UserData/%uuid of loop-player%.yml" to "tpahere"
								set skutil yaml value "tpa-location" from file "plugins/WorldNetwork/UserData/%uuid of loop-player%.yml" to player's location
								set {TPAHERE::%player%::%loop-player%} to true
								send "&a%player% &7Want you teleport to them" to loop-player
								send "&a/tpaccept &7to accept &c/tpdeny &7to deny" to loop-player
								send "&7You have &a120 second &7To confirm" to loop-player
								wait 120 second
								if {TPAHERE::%player%::%loop-player%} is true:
									set {TPAHERE::%player%::%loop-player%} to false
									if skutil yaml value "tpa-from" from file "plugins/WorldNetwork/UserData/%uuid of loop-player%.yml" is player:
										set skutil yaml value "tpa-from" from file "plugins/WorldNetwork/UserData/%uuid of loop-player%.yml" to "none"
										set skutil yaml value "tpa-method" from file "plugins/WorldNetwork/UserData/%uuid of loop-player%.yml" to "none"
										set skutil yaml value "tpa-location" from file "plugins/WorldNetwork/UserData/%uuid of loop-player%.yml" to "none"
		else:
			send "&7That command is on cooldown" to player
		wait 10 second
		if {TPALL::cooldown} is false:
			add 1 to {SPAM::time::%player%}
		else if {TPALL::cooldown} is true:
			set {TPALL::cooldown} to false
			send "&a/tpall command is now avaible" to player
			set {SPAM::time::%player%} to 0
		else:
			set {TPALL::cooldown} to false
		if {SPAM::time::%player%} = 5:
			kick player due to "Dont spam"
			set {SPAM::time::%player%} to 0
command sethome [<text>]:
	description: set home to player location
	usage: &cCorrect usage &7/sethome <name>
	aliases: createhome, worldnetwork:sethome, worldnetwork:createhome
	trigger:
		set {HOME::max::%player%} to yml value "home.%{group::%player%}%" of file {@config}
		if arg-1 is set:
			loop {GROUP::list::*}:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					set {home::%player%::*} to skutil yaml nodes "home.%loop-value%" of file {@player-data}
					loop {home::%player%::*}:
						add 1 to {count::%player%}
					if {count::%player%} >= {HOME::max::%player%}:
						send "&cYou can't have another home"
					else:
						set skutil yaml value "home.%loop-value%.%arg-1%" from file {@player-data} to player's location
						send "&7Home set with name &a%arg-1%" to player
		else:
			loop {GROUP::list::*}:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					set {home::%player%::*} to skutil yaml nodes "home.%loop-value%" of file {@player-data}
					loop {home::%player%::*}:
						add 1 to {count::%player%}
					if {count::%player%} >= {HOME::max::%player%}:
						send "&cYou can't have another home"
					else:
						set skutil yaml value "home.%loop-value%.%arg-1%" from file {@player-data} to player's location
						send "&7Home set with name &a%arg-1%" to player
						send "&7Home set with name &ahome" to player
		set {count::%player%} to 0
command home <text>:
	aliases: worldnetwork:home
	description: Teleport to saved home
	usage: &cCorrect usage /home <name/list>
	trigger:
		loop {GROUP::list::*}:
			if arg-1 is "list":
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					send "&7|--&aHome List&7--|" to player
					set {home::%player%::*} to skutil yaml nodes "home.%loop-value%" of file {@player-data}
					loop {home::%player%::*}:
						send "&7- &a%loop-value-2%" to player
			else if arg-1 is set:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					if yml path "home.%loop-value%.%arg-1%" in file {@player-data} exists:
						teleport player to skutil yaml value "home.%loop-value%.%arg-1%" from file {@player-data}
						send "&7Teleporting to %arg-1%" to player
					else:
						send "&7Home with that name dint exist"
command delhome <text>:
	aliases: deletehome, removehome, worldnetwork:delhome, worldnetwork:deletehome, worldnetwork:removehome
	description: Remove saved home
	usage: &cCorrect usage /delhome <name>
	trigger:
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				set {_home} to skutil yaml value "home.%loop-value%.%arg-1%" from file {@player-data}
				if {_home} exist:
					delete skutil yaml value "home.%loop-value%.%arg-1%" from file {@player-data}
					send "&7Home %arg-1% has deleted" to player
				else:
					send "&7That home didn't exist" to player
command back:
	description: Back to last location before teleported
	aliases: return, worldnetwork:back, worldnetwork:return
	usage: /back
	trigger:
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				if {last-location::%player%::%loop-value%} is set:
					teleport player to {last-location::%player%::%loop-value%}
					send title "&eTeleporting.." to player
				else:
					send "&7You don't have anywhere to go back"
command fly [<text>]:
	aliases: worldnetwork:fly
	description: Toggle fly mode
	permission: worldnetwork.fly
	permission message: {@no-permission}
	usage: &cCorrect usage: &7/fly <on/off>
	trigger:
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				set {FLY::%player%} to yml value "fly.%loop-value%" of file {@player-data}
				if arg-1 is set:
					if arg-1 is "on":
						if {FLY::%player%} is "off":
							set skutil yaml value "fly.%loop-value%" from file {@player-data} to "on"
							set player's flight mode to true
							send "&aYou enable flight mode" to player
						else:
							send "&cYour flight mode is already enabled"
					else if arg-1 is "off":
						if {FLY::%player%} is "on":
							set skutil yaml value "fly.%loop-value%" from file {@player-data} to "off"
							set player's flight mode to false
							send "&cYou disable flight mode" to player
						else:
							send "&cYour flight mode is already disabled"
					else if arg-1 is not "on" or "off":
						send "&cCoreect usage: &7/fly <on/off>"
				else if arg-1 is not set:
					if {FLY::%player%} is "off":
						set skutil yaml value "fly.%loop-value%" from file {@player-data} to "on"
						set player's flight mode to true
						send "&aYou enable flight mode" to player
					else if {FLY::%player%} is "on":
						set skutil yaml value "fly.%loop-value%" from file {@player-data} to "off"
						set player's flight mode to false
						send "&cYou disable flight mode" to player
command msg <player> [<text>]:
	aliases: w, m, t, whisper, tell, worldnetwork:msg, worldnetwork:w, worldnetwork:m, worldnetwork:t, worldnetwork:whisper, worldnetwork:tell
	usage: &cCoreect usage: /msg <player> <message>
	trigger:
		loop {GROUP::list::*}:
			if arg-1 is not player:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					if {GROUP::world-list::%loop-value%::*} contains {world::%arg-1%}:
						if arg-2 is set:
							set {_message} to "&f[&a%player%&f] -> &f[&a%arg-1%&f] %arg-2%"
							set skutil yaml value "msg-sender.%loop-value%" from file "plugins/WorldNetwork/UserData/%uuid of arg-1%.yml" to player
							message coloured {_message} to arg-1
							message coloured {_message} to player
						else:
							send "&cCorrect usage: /msg <player> <message>" to player
					else:
						send "&aThat player is not in the same server as you" to player
command r [<text>]:
	aliases: reply, worldnetwork:r, worldnetwork:reply
	trigger:
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				set {SENDER::%player%} to yml value "msg-sender.%loop-value%" of file {@player-data} 
				if {SENDER::%player%} is not "none":
					set {_message} to "&f[&a%player%&f] -> &f[&a%{SENDER::%player%}%&f] %arg-1%"
					message coloured {_message} to {SENDER::%player%}
					message coloured {_message} to player
				else:
					send "&aYou dont have anyone to reply" to player
command nick [<text>]:
	aliases: nickname, worldnetwork:nick, worldnetwork:nickname
	permission: worldnetwork.nick
	permission message: {@no-permission}
	trigger:
		if arg-1 is set:
			loop {GROUP::list::*}:
				if arg-1 is "off":
					{GROUP::world-list::%loop-value%::*} contains {world::%player%}:
						set skutil yaml value "Player-nickname.%loop-value%" from file {@player-data} to "%player%"
						set {_hd} to yml value "Player-nickname.%loop-value%" of file {@player-data}
						set player's display name to {_hd}
						send "&aYour nickname has set to default" to player
				else:
					{GROUP::world-list::%loop-value%::*} contains {world::%player%}:
						set skutil yaml value "Player-nickname.%loop-value%" from file {@player-data} to arg-1
						set {_hd} to yml value "Player-nickname.%loop-value%" of file {@player-data}
						set player's display name to {_hd}
						send "&aYour nickname has set to %arg-1%" to player
		else:
			send "&cCorrect usage: &7/nick <nickname/off>" to player
command god [<text>] [<player>]:
	aliases: godmode, tgm, worldnetwork:god, worldnetwork:godmode, worldnetwork:tgm
	permission: worldnetwork.god
	permission message: {@no-permission}
	trigger:
		loop {GROUP::list::*}:
			if arg-2 is set:
				if sender have permission "worldnetwork.godplayer":
					if {GROUP::world-list::%loop-value%::*} contains {world::%arg-2%}:
						if arg-1 is "on":
							set skutil yaml value "god.%loop-value%" from file "plugins/WorldNetwork/UserData/%uuid of arg-2%.yml" to true
							set {god::%arg-2%} to yml value "god.%loop-value%" of file "plugins/WorldNetwork/UserData/%uuid of arg-2%.yml"
							send "&aYou enable god mode" to arg-2
						else if arg-1 is "off":
							set skutil yaml value "god.%loop-value%" from file "plugins/WorldNetwork/UserData/%uuid of arg-2%.yml" to false
							set {god::%arg-2%} to yml value "god.%loop-value%" of file "plugins/WorldNetwork/UserData/%uuid of arg-2%.yml"
							send "&aYou disable god mode" to arg-2
						else if arg-1 is not "on" or "off":
							send "&cCorrect usage: &7/god <on/off> <player>" to player
			else if arg-1 is set:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					if arg-1 is "on":
						set skutil yaml value "god.%loop-value%" from file {@player-data} to true
						set {god::%player%} to yml value "god.%loop-value%" of file {@player-data}
						send "&aYou enable god mode" to player
					else if arg-1 is "off":
						set skutil yaml value "god.%loop-value%" from file {@player-data} to false
						set {god::%player%} to yml value "god.%loop-value%" of file {@player-data}
						send "&aYou disable god mode" to player
					else if arg-1 is not "on" or "off":
						send "&cCorrect usage: &7/god <on/off>" to player
			else:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					set {god::%player%} to yml value "god.%loop-value%" of file {@player-data}
					if {god::%player%} is true:
						set skutil yaml value "god.%loop-value%" from file {@player-data} to false
						set {god::%player%} to yml value "god.%loop-value%" of file {@player-data}
						send "&aYou disable god mode" to player
					else if {god::%player%} is false:
						set skutil yaml value "god.%loop-value%" from file {@player-data} to true
						set {god::%player%} to yml value "god.%loop-value%" of file {@player-data}
						send "&aYou enable god mode" to player
command kit [<text>]:
	aliases: kits, worldnetwork:kit, worldnetwork:kits
	trigger:
		if arg-1 is "gui":
			if player have permission "worldnetwork.setkit":
				set {_kit::gui} to a new chest inventory with 3 row named "Kit Gui"
				set slot 11 of {_kit::gui} to crafting table named "&aCreate kit"
				set slot 13 of {_kit::gui} to ender chest named "&aEdit kit"
				set slot 15 of {_kit::gui} to chest named "&aDelete kit"
				open {_kit::gui} to player
		else if arg-1 is set:
			loop {GROUP::list::*}:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					set {KIT::list::%loop-value%::*} to yml nodes "kit.%loop-value%" of file {@kit}
					loop {KIT::list::%loop-value%::*}:
						if yml path "kit.%loop-value-1%.%loop-value-2%.permission" in file {@kit} exists:
							set {KIT::permission::%loop-value-2%} to yml value "kit.%loop-value-1%.%loop-value-2%.permission" of file {@kit}
					if arg-1 is "list":
						set {_count} to 20
						set {_kits} to a new chest inventory with 6 rows named "kit list"
						set slot 0 of {_kits} to gray stained glass pane named ""
						set slot 1 of {_kits} to gray stained glass pane named ""
						set slot 2 of {_kits} to gray stained glass pane named ""
						set slot 3 of {_kits} to gray stained glass pane named ""
						set slot 4 of {_kits} to gray stained glass pane named ""
						set slot 5 of {_kits} to gray stained glass pane named ""
						set slot 6 of {_kits} to gray stained glass pane named ""
						set slot 7 of {_kits} to gray stained glass pane named ""
						set slot 8 of {_kits} to gray stained glass pane named ""
						loop {KIT::list::%loop-value%::*}:
							if {KIT::permission::%loop-value-2%} is set:
								if player have permission "%{KIT::permission::%loop-value-2%}%":
									set slot {_count} of {_kits} to diamond named "&f%loop-value-2%"
								else:
									set slot {_count} of {_kits} to barrier named "&f%loop-value-2%"
							else:
								set slot {_count} of {_kits} to diamond named "&f%loop-value-2%"
							add 1 to {_count}
							if {_count} < 30:
								if {_count} > 24:
									set {_count} to 30
							if {_count} > 32:
								stop
						set slot 45 of {_kits} to gray stained glass pane named ""
						set slot 46 of {_kits} to gray stained glass pane named ""
						set slot 47 of {_kits} to gray stained glass pane named ""
						set slot 48 of {_kits} to gray stained glass pane named ""
						set slot 49 of {_kits} to gray stained glass pane named ""
						set slot 50 of {_kits} to gray stained glass pane named ""
						set slot 51 of {_kits} to gray stained glass pane named ""
						set slot 52 of {_kits} to gray stained glass pane named ""
						set slot 53 of {_kits} to gray stained glass pane named ""
						open {_kits} to player
						set {_count} to 0
					else if {KIT::list::%loop-value%::*} contains arg-1:
						if yml path "kit.%loop-value%.%arg-1%.permission" in file {@kit} exists:
							set {_permission} to yml value "kit.%loop-value%.%arg-1%.permission" of file {@kit}
							if player have permission {_permission}:
								if yml path "kit.%loop-value%.%arg-1%.cooldown" in file {@player-data} exists:
									set {_wait} to skutil yaml value "kit.%loop-value%.%arg-1%.cooldown" from file {@player-data}
									set {_wait} to convert unix {_wait} to date
									set {_delay} to yml value "kit.%loop-value%.%arg-1%.delay" of file {@kit}
									if {_delay} contains "seconds" or "minutes" or "hour" or "month":
										set {_delay} to {_delay} parsed as timespan
									else:
										set {_delay} to "%{_delay}% seconds" parsed as timespan
									set {_now} to now
									set {_cooldown} to difference between (convert unix (convert date {_wait} to unix) to date) and (convert unix (convert date {_now} to unix) to date)
									if {_delay} > {_cooldown}:
										remove {_cooldown} from {_delay}
										send action bar "&aPlease wait %{_delay}% before using that kit again"
										stop
								set {_temp::*} to yml list "kit.%loop-value%.%arg-1%.item" of file {@kit}
								loop {_temp::*}:
									give loop-value-2 to player
								set skutil yaml value "kit.%loop-value%.%arg-1%.cooldown" from file {@player-data} to convert date now to unix
							else:
								send "&c{@no-permission}" to player
						else:
							if yml path "kit.%loop-value%.%arg-1%.cooldown" in file {@player-data} exists:
								set {_wait} to skutil yaml value "kit.%loop-value%.%arg-1%.cooldown" from file {@player-data}
								set {_wait} to convert unix {_wait} to date
								set {_delay} to yml value "kit.%loop-value%.%arg-1%.delay" of file {@kit}
								if {_delay} contains "seconds" or "minutes" or "hour" or "month":
									set {_delay} to {_delay} parsed as timespan
								else:
									set {_delay} to "%{_delay}% seconds" parsed as timespan
								set {_now} to now
								set {_cooldown} to difference between (convert unix (convert date {_wait} to unix) to date) and (convert unix (convert date {_now} to unix) to date)
								if {_delay} > {_cooldown}:
									remove {_cooldown} from {_delay}
									send action bar "&aPlease wait %{_delay}% before using that kit again"
									stop
							set {_temp::*} to yml list "kit.%loop-value%.%arg-1%.item" of file {@kit}
							loop {_temp::*}:
								give loop-value-2 to player
							set skutil yaml value "kit.%loop-value%.%arg-1%.cooldown" from file {@player-data} to convert date now to unix
					else:
						send "&cThat kit does not exist" to player
		else:
			if player have permission "worldnetwork.setkit":
				send "&cCorrect usage: &f/kit <kit/list/gui>" to player
			else:
				send "&cCorrect usage: &f/kit <kit/list>" to player
on chat:
	cancel event
	{kit::create::%player%} is true:
		set {kit::name} to chat-message
		loop {GROUP::list::*}:
			set skutil yaml value "kit.%loop-value%.%{kit::name}%.delay" of file {@kit} to 60
		set {_kit} to a new chest inventory with 4 row named chat-message
		open {_kit} to player
	{kit::edit::%player%} is true:
		set {_kit::%chat-message%} to a new chest inventory with 4 row named chat-message
		loop {GROUP::list::*}:
			set {_item::*} to yml list "kit.%loop-value%.%chat-message%" of file {@kit}
			if {_item::*} is set:
				set {_loop::time} to 0
				loop {_item::*}:
					set slot {_loop::time} of {_kit::%chat-message%} to loop-value-2
					add 1 to {_loop::time}
		open {_kit::%chat-message%} to player
on inventory click:
	name of event-inventory is "Kit Gui":
		cancel event
		name of event-item is "&aCreate kit":
			send "&aPlease enter kit name" to player
			set {kit::create::%player%} to true
			close player's inventory
		name of event-item is "&aEdit kit":
			send "&aPlease enter kit name" to player
			set {kit::edit::%player%} to true
			close player's inventory
		name of event-item is "&aDelete kit":
			loop {GROUP::list::*}:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					set {_delete::kit} to a new chest inventory with 6 row named "Delete kit"
					set {_count} to 0
					set {kit::list::*} to yml nodes "kit.%loop-value%" of file {@kit}
					loop {kit::list::*}:
						set slot {_count} of {_delete::kit} to chest named "&f%loop-value-2%"
						add 1 to {_count}
					open {_delete::kit} to player
	name of event-inventory is "kit list":
		cancel event
	name of event-inventory is "Delete kit":
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				set {kit::list::*} to yml nodes "kit.%loop-value%" of file {@kit}
				loop {kit::list::*}:
					name of event-item is "&f%loop-value-2%":
						loop {GROUP::list::*}:
							delete skutil yaml value "kit.%loop-value-3%.%loop-value-2%" from file {@kit}
						close player's inventory
						send "&aKit %loop-value-2% deleted!" to player
on inventory close:
	name of event-inventory is "%{kit::name}%":
		if {kit::create::%player%} is true:
			set {kit::create::%player%} to false
			loop all items in event-inventory:
				loop-value is not air
				add loop-value to {_kit::%{kit::name}%::*}
			loop {_kit::%{kit::name}%::*}:
				loop {GROUP::list::*}:
					add loop-value-1 to yml list "kit.%loop-value-2%.%{kit::name}%.item" of file {@kit}
			send "&aKit created with name %{kit::name}%" to player
			send "&aThe default delay is 1 minute if want more edit it in &ekit.yml &afile" to player
		else if {kit::edit::%player%} is true:
			set {kit::edit::%player%} to false
			delete {_kit::%{kit::name}%::*}
			loop all items in event-inventory:
				loop-value is not air
				add loop-value to {_kit::%{kit::name}%::*}
			loop {GROUP::list::*}:
				delete skutil yaml value "kit.%loop-value%.%{kit::name}%.item" from file {@kit}
			loop {_kit::%{kit::name}%::*}:
				loop {GROUP::list::*}:
					add loop-value-1 to yml list "kit.%loop-value-2%.%{kit::name}%.item" of file {@kit}
			send "&aKit %{kit::name}% edited!" to player
command gc [<text>]:
	aliases: globalchat, worldnetwork:gc, worldnetwork:globalchat
	permission: worldnetwork.globalchat
	permission message: {@no-permission}
	trigger:
		if arg-1 is set:
			loop {GROUP::list::*}:
				if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
					set {_name} to skutil yaml value "Player-name" of file {@player-data}
					set {_prefix} to coloured player's prefix
					set {_MESSAGE} to coloured arg-1
					set {_world} to loop-value
					if {_prefix} is set:
						set {_message} to "&f[&a%{_world}%&f]&r%{_prefix}%[%{_name}%]:&r %{_MESSAGE}%"
					else:
						set {_message} to "&f[&a%{_world}%&f]&f[&a%{group::%player%}%&f]&7[%{_name}%]:&r %{MESSAGE}%"
					loop all players:
						send coloured {_message} to loop-player
					send {_message} to console
		else:
			send "&cCorrect usage:&7 /gc <chat>" to player
command enderchest:
	aliases: ec, worldnetwork:enderchest, worldnetwork:ec
	permission: worldnetwork.ec
	permission message: {@no-permission}
	trigger:
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				if file "plugins/WorldNetwork/enderchest/%loop-value%/%uuid of player%.yml" exists:
					set {enderchest::%player%::*} to yml list "enderchest" of file "plugins/WorldNetwork/enderchest/%loop-value%/%uuid of player%.yml"
					set {_ec::count} to 0
					delete {_ec::%player%}
					set {_ec::%player%} to a new chest inventory with 3 row named "Ender Chest"
					loop {enderchest::%player%::*}:
						set slot {_ec::count} of {_ec::%player%} to loop-value-2
						add 1 to {_ec::count}
					open {_ec::%player%} to player
				else if file "plugins/WorldNetwork/enderchest/%loop-value%/%uuid of player%.yml" does not exist:
					create file "plugins/WorldNetwork/enderchest/%loop-value%/%uuid of player%.yml"
					set {_ec::%player%} to a new chest inventory with 3 row named "Ender Chest"
					open {_ec::%player%} to player
on right click:
	if event-block is ender chest:
		if yml path "enderchest.%{group::%player%}%" in file {@config} exists:
			set {EC::max::%player%} to yml value "enderchest.%{group::%player%}%" of file {@config}
		else:
			set {EC::max::%player%} to yml value "enderchest.default" of file {@config}
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				if file "plugins/WorldNetwork/enderchest/%loop-value%/%uuid of player%.yml" exists:
					cancel event
					set {enderchest::%player%::*} to yml list "enderchest" of file "plugins/WorldNetwork/enderchest/%loop-value%/%uuid of player%.yml"
					set {_ec::count} to 0
					delete {_ec::%player%}
					set {_ec::%player%} to a new chest inventory with {EC::max::%player%} row named "Ender Chest"
					loop {enderchest::%player%::*}:
						set slot {_ec::count} of {_ec::%player%} to loop-value-2
						add 1 to {_ec::count}
					open {_ec::%player%} to player
				else if file "plugins/WorldNetwork/enderchest/%loop-value%/%uuid of player%.yml" does not exist:
					cancel event
					create file "plugins/WorldNetwork/enderchest/%loop-value%/%uuid of player%.yml"
					set {_ec::%player%} to a new chest inventory with {EC::max::%player%} row named "Ender Chest"
					open {_ec::%player%} to player
on inventory close:
	name of event-inventory is "Ender Chest":
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				delete skutil yaml list "enderchest" from file "plugins/WorldNetwork/enderchest/%loop-value%/%uuid of player%.yml"
				loop all items in event-inventory:
					add loop-value-2 to {_temphd::*}
				loop {_temphd::*}:
					add loop-value-2 to yml list "enderchest" of file "plugins/WorldNetwork/enderchest/%loop-value-1%/%uuid of player%.yml"
on player world change:
	set {world::%player%} to player's world
	wait 1 second
	loop {GROUP::list::*}:
		if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
			set {FLY::%player%} to yml value "fly.%loop-value%" of file {@player-data}
			set {god::%player%} to yml value "god.%loop-value%" of file {@player-data}
			if {FLY::%player%} is "on":
				set player's flight mode to true
			else if {FLY::%player%} is "off":
				set player's flight mode to false
			else:
				set player's flight mode to false
on join:
	set skutil yaml value "Status" from file {@player-data} to "Online"
	set {world::%player%} to player's world
	set {group::%player%} to player's group
	if {group::%player%} is not set:
		set {group::%player%} to "default"
	if {SPAWN::hub} is not "none":
		teleport player to {SPAWN::hub}
on player move:
	wait 5 second
	set {group::%player%} to player's group
on disconnect:
	set skutil yaml value "Status" from file {@player-data} to "Offline"
	loop {GROUP::list::*}:
		set skutil yaml value "msg-sender.%loop-value%" from file {@player-data} to "none"
on connect:
	set {UUID::%player%} to UUID of player
	if file "plugins/WorldNetwork/UserData/%uuid of player%.yml" does not exist:
		create file "plugins/WorldNetwork/UserData/%uuid of player%.yml"
		set skutil yaml value "Player-name" from file {@player-data} to "%player%"
		set skutil yaml value "tpa-location" from file {@player-data} to "None"
		set skutil yaml value "tpa-from" from file {@player-data} to "none"
		set skutil yaml value "tpa-method" from file {@player-data} to "none"
	loop {GROUP::list::*}:
		if yml path "Player-nickname.%loop-value%" in file {@player-data} does not exist:
			set skutil yaml value "Player-nickname.%loop-value%" from file {@player-data} to "%player%"
		if yml path "fly.%loop-value%" in file {@player-data} does not exist:
			set skutil yaml value "fly.%loop-value%" from file {@player-data} to "off"
		if yml path "msg-sender.%loop-value%" in file {@player-data} does not exist:
			set skutil yaml value "msg-sender.%loop-value%" from file {@player-data} to "none"
		if yml path "god.%loop-value%" in file {@player-data} does not exist:
			set skutil yaml value "god.%loop-value%" from file {@player-data} to false
	set {TPA::method} to skutil yaml value "tpa-method" of file {@player-data}
	set {STATUS::%player%} to yaml value "Status" of file {@player-data}
on teleport:
	loop {GROUP::list::*}:
		if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
			set {last-location::%player%::%loop-value%} to player's location
on death:
	victim is player:
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%victim%}:
				set {last-location::%victim%::%loop-value%} to victim's location
on damage:
	victim is player
	if {god::%victim%} is true:
		cancel event
on chat:
	if {kit::create::%player%} is true:
		cancel event
		stop
	else if {kit::edit::%player%} is true:
		cancel event
		stop
	else if {kit::delay::%player%} is true:
		cancel event
		stop
	else:
		loop {GROUP::list::*}:
			if {GROUP::world-list::%loop-value%::*} contains {world::%player%}:
				cancel event
				set {_name} to skutil yaml value "Player-nickname.%loop-value%" of file {@player-data}
				set {_prefix} to coloured player's prefix
				set {MESSAGE} to coloured chat-message
				if {_prefix} is set:
					set {_message} to "%{_prefix}%[%{_name}%]:&r %{MESSAGE}%"
				else:
					set {_message} to "&f[&a%{group::%player%}%&f]&7[%{_name}%]:&r %{MESSAGE}%"
				loop all players:
					if {GROUP::world-list::%loop-value-1%::*} contains {world::%loop-player%}:
						send coloured {_message} to loop-player
				send {_message} to console
